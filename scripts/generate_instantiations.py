#!/usr/bin/python

"""Generator for explicit instantiations of StorageFacade template methods"""
import os
import re


def find_dbmodel_structs(root_dir):
    """Scan specified directory to find all DbModel structs"""
    struct_pattern = re.compile(r"struct\s+(\w+)\s*\{")
    dbmodel_structs = set()

    for root, _, files in os.walk(root_dir):
        for file in files:
            if file.endswith((".h", ".cpp")):
                filepath = os.path.join(root, file)
                with open(filepath, "r", encoding="utf-8") as f:
                    content = f.read()
                    # Check if in DbModel namespace
                    if "namespace DbModel" in content:
                        # Extract all struct names
                        for match in struct_pattern.finditer(content):
                            struct_name = match.group(1)
                            dbmodel_structs.add(struct_name)
    return sorted(dbmodel_structs)


def generate_instantiations(structs):
    """Generate explicit instantiation code"""
    instantiations = []
    for struct in structs:
        instantiations.append(
            f"template void StorageFacade::insertClassObj<DbModel::{struct}&>(DbModel::{struct}&);"
        )
    return "\n".join(instantiations)


def main():
    """Main entry point"""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    dbmodel_dir = os.path.join(script_dir, "..", "include", "model", "db")
    dbmodel_structs = find_dbmodel_structs(dbmodel_dir)

    if not dbmodel_structs:
        print("No DbModel structs found! Please check your code.")
        return

    instantiations_code = generate_instantiations(dbmodel_structs)

    output_dir = os.path.join(script_dir, "..", "src", "db")
    os.makedirs(output_dir, exist_ok=True)
    output_file = os.path.join(output_dir, "storage_facade_instantiations.inc")
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(
            "// Auto-generated explicit instantiations (generated by generate_instaniations.py) \
            DO NOT MODIFY\n\n"
        )
        f.write(instantiations_code)

    print(
        f"Successfully generated {len(dbmodel_structs)} instantiations in {output_file}"
    )


if __name__ == "__main__":
    main()
